!<arch>
0-isupper.c/    0           0     0     644     196       `
/**
 * _isupper - checks if a character is upper case
 * @c: the integer value
 *
 * Return: 1 if true 0 otherwise
 */
int _isupper(int c)
{
	if (c >= 65 && c <= 90)
		return (1);

	return (0);
}
0-memset.c/     0           0     0     644     283       `
/**
 * _memset - fills the first n bytes
 * @s: the string to be filled
 * @b: bytes to be used to fill
 * @n: the n bytes to fill
 *
 * Return: pointer
 */
char *_memset(char *s, char b, unsigned int n)
{
	unsigned int i;

	for (i = 0; i < n; i++)
	{
		s[i] = b;
	}

	return (s);
}

0-strcat.c/     0           0     0     644     378       `

/**
 * _strcat - concatenates two strings
 * @dest: the first string
 * @src: the second string
 *
 * Return: character pointer of the concatenated string
 */
char *_strcat(char *dest, char *src)
{
	int i, j;

	i = 0;
	j = 0;

	while (1)
	{
		if (dest[i] == '\0')
		{
			break;
		}

		i++;
	}

	while (src[j] != '\0')
	{
		dest[i] = src[j];
		i++;
		j++;
	}

	return (dest);
}
100-atoi.c/     0           0     0     644     536       `
/**
 * _atoi - convert string to int
 * @s: the string to convert
 *
 *  Return: a number
 */
int _atoi(char *s)
{
	int sign;
	int result;
	int i, difference;

	sign = 1;

	if (s[0] == '-')
	{
		sign = -1;
	}

	i = 0;
	result = 0;
	difference = 0;

	while (s[i] != '\0')
	{
		difference = s[i] - '0';

		if (difference >= 0 && difference <= 9)
		{
			if (s[i - 1] == '-')
			{
				sign = -1;
			}
			else if (s[i - 1] == '+')
			{
				sign = 1; 
			}
			result = (result * 10) + (s[i] - '0');
		}

		i++;
	}

	return (result * sign);
}
1-isdigit.c/    0           0     0     644     199       `
/**
 * _isdigit - checks if a character is upper a digit
 * @c: the integer value
 *
 * Return: 1 if true 0 otherwise
 */
int _isdigit(int c)
{
	if (c >= 48 && c <= 57)
		return (1);

	return (0);
}

1-memcpy.c/     0           0     0     644     308       `
/**
 * _memcpy - copies n bytes from memory
 * @dest: the string to be filled
 * @src: bytes to be used to fill
 * @n: the n bytes to fill
 *
 * Return: pointer
 */
char *_memcpy(char *dest, char *src, unsigned int n)
{
	unsigned int i;

	for (i = 0; i < n; i++)
	{
		dest[i] = src[i];
	}

	return (dest);
}
1-strncat.c/    0           0     0     644     464       `

/**
 * _strncat - concatenates two strings
 * @dest: the first string
 * @src: the second string
 * @n: number of bytes to be used for concatenation
 *
 * Return: character pointer of the concatenated string
 */
char *_strncat(char *dest, char *src, int n)
{
	int i, j;

	i = 0;
	j = 0;

	while (1)
	{
		if (dest[i] == '\0')
		{
			break;
		}

		i++;
	}

	while (j != n)
	{
		if (src[j] == '\0')
			break;

		dest[i] = src[j];
		i++;
		j++;
	}

	return (dest);
}
2-strchr.c/     0           0     0     644     341       `
#include <stddef.h>

/**
 * _strchr - locates a character in a string
 * @s: the string to be checked
 * @c: the character to be searched
 *
 * Return: pointer
 */
char *_strchr(char *s, char c)
{
	int i;
	char *target = NULL;

	for (i = 0; s[i] != '\0'; i++)
	{
		if (s[i] == c)
		{
			target = &s[i];
			break;
		}
	}

	return (target);
}

2-strlen.c/     0           0     0     644     239       `

/**
 * _strlen -  determine lenght of a string
 * @s: character ponter
 *
 * Return: string length
 */
int _strlen(char *s)
{
	int len;

	len = 0;

	while (1)
	{
		if (*(s + len) == '\0')
		{
			break;
		}

		len++;
	}

	return (len);

}

2-strncpy.c/    0           0     0     644     488       `

/**
 * _strncpy - copies a string
 * @dest: the first string
 * @src: the second string
 * @n: number of bytes to be used for copying
 *
 * Return: character pointer of the copied string
 */
char *_strncpy(char *dest, char *src, int n)
{
	int i, src_len;

	i = 0;
	src_len = 0;

	while (1)
	{
		if (src[src_len] == '\0')
		{
			break;
		}

		src_len++;
	}

	while (i != n)
	{
		if (i > src_len)
		{
			dest[i] = '\0';
		}
		else
		{
			dest[i] = src[i];
		}
		i++;
	}

	return (dest);
}
3-islower.c/    0           0     0     644     197       `
/**
 * _islower - checks if a character is lower case
 * @c: the integer value
 *
 * Return: 1 if true 0 otherwise
 */
int _islower(int c)
{
	if (c >= 97 && c <= 122)
		return (1);

	return (0);
}

3-puts.c/       0           0     0     644     252       `
#include "main.h"

/**
 * _puts - print string to the console
 * @str: string to be printed
 */
void _puts(char *str)
{
	int i;

	i = 0;

	while (1)
	{
		if (*(str + i) == '\0')
		{
			break;
		}

		_putchar(*(str + i));

		i++;
	}

	_putchar('\n');
}
3-strcmp.c/     0           0     0     644     337       `

/**
 * _strcmp - compares strings
 * @s1: the first string
 * @s2: the second string
 *
 * Return: 0 if equal postive
 */
int _strcmp(char *s1, char *s2)
{
	int i, diff;

	i = 0;

	while (1)
	{
		if (s1[i] == '\0')
			break;

		diff = (s1[i] + '0') - (s2[i] + '0');

		if (diff  > 0 || diff < 0)
			break;

		i++;
	}

	return (diff);
}

3-strspn.c/     0           0     0     644     516       `
#include <string.h>

/**
 * _strspn - gets the number of bytes
 * @s: the string to be checked
 * @accept: the values to be checked against
 *
 * Return: count
 */
unsigned int _strspn(char *s, char *accept)
{
	size_t i, j;
	int flag;
	unsigned int count = 0;

	flag = 0;

	for (i = 0; i < strlen(s); i++)
	{
		for (j = 0; j < strlen(accept); j++)
		{
			flag = 0;
			if (accept[j] == s[i])
			{
				flag = 1;
				break;
			}
		}

		if (flag == 1)
		{
			count++;
		}
		else
		{
			break;
		}
	}

	return (count);
}
4-isalpha.c/    0           0     0     644     210       `
/**
 * _isalpha - checks for alphabetic character
 * @c: the integer value of the character
 *
 * Return: 1 if true 0 otherwise
 */
int _isalpha(int c)
{
	if (c >= 65 && c <= 122)
		return (1);

	return (0);
}
4-strpbrk.c/    0           0     0     644     403       `
/**
 * _strpbrk - first occurence of the string s
 * @s: the string to be checked
 * @accept: the values to be checked against
 *
 * Return: poinrter
 */
char *_strpbrk(char *s, char *accept)
{
	int i, j;
	char *found = 0;

	for (i = 0; s[i] != '\0'; i++)
	{
		for (j = 0; accept[j] != '\0'; j++)
		{
			if (s[i] == accept[j])
			{
				found = &s[i];
				return (found);
			}
		}
	}

	return (found);
}

5-strstr.c/     0           0     0     644     557       `
#include <string.h>

/**
 * _strstr - first occurence of the string s
 * @haystack: the string to be checked
 * @needle: the values to be checked against
 *
 * Return: pointer
 */
char *_strstr(char *haystack, char *needle)
{
	unsigned long int i, j, flag;

	for (i = 0; i < strlen(haystack); i++)
	{
		if (haystack[i] == needle[0])
		{
			flag = 0;

			for (j = 0; j < strlen(needle); j++)
			{
				if (haystack[i + j] != needle[j])
				{
					flag = 1;
					break;
				}
			}

			if (flag == 0)
			{
				return (&haystack[i]);
			}
		}
	}

	return (0);
}

6-abs.c/        0           0     0     644     219       `
/**
 * _abs - gets the absolute value of a number
 * @n: the integer
 *
 * Return: the absolute value
 */
int _abs(int n)
{
	int new_value;

	if (n < 0)
	{
		new_value = n * -1;
		return (new_value);
	}

	return (n);
}

9-strcpy.c/     0           0     0     644     387       `
#include <stdio.h>

/**
 * _strcpy- copies a string from source to destination
 * @dest: the desination
 * @src: the source
 *
 * Return: pointer to the copied destination
 */
char *_strcpy(char *dest, char *src)
{
	int i;
	char *temp = src;

	*dest = *temp;

	i = 0;

	while (1)
	{
		*(dest + i) = *(temp + i);

		if (*(src + i) == '\0')
		{
			break;
		}

		i++;
	}

	return (dest);
}

_putchar.c/     0           0     0     644     252       `
#include <unistd.h>

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 *
 */
int _putchar(char c)
{

	return (write(1, &c, 1));

}
